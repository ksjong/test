// SPDX-License-Identifier: UNLICENSED
pragma ever-solidity >= 0.62.0;
import "locklift/src/console.tsol";
import "Worker.tsol";

contract Company {
    // signer의 publicKey를 받는 변수
    uint256 public owner;

    uint256 public salary;
    address public comp_address;

    mapping(address => bool) public worker;

    TvmCell static workerContractCode;



    event WorkRegistered(address _worker);
//    event WorkRegistered();
    event CompanyRegisterAccept(address sender, string message);

    // const Param으로 signer.pubkey를 받아서 Company의 owner에 할당
    constructor(
        uint256 _owner,
        uint256 _salary
    ) public {
        tvm.accept();
        owner = _owner;
        salary = _salary;
        comp_address = address(this);

    }

    modifier onlyOwner() {
        require(msg.pubkey() == owner, 1001);
        _;
    }

    function getAddress(uint256 _worker_pubkey, string _comp_name) public view returns(address){
        tvm.accept();
        address workerAddress = address(tvm.hash(tvm.buildStateInit({
            contr: Worker,
            varInit: {
                worker_pubkey:  _worker_pubkey,
                company_address: comp_address
//                comp_name: _comp_name
            },
            pubkey: _worker_pubkey,
            code: workerContractCode
        })));
        return workerAddress;
    }

    function registerWorker(
        address _worker
    ) external onlyOwner {
        tvm.accept();
        Worker(_worker).registerdAccept();

    }

    function comRegisteredAccept() external {
        worker[msg.sender] = true;

        emit CompanyRegisterAccept(msg.sender,"Accept");
    }

    function doWork(uint256 _workpubKey, string _comp_name) external {

//        require(worker[msg.sender], 1002);

        // why msg.pubkey() != WorkerPubkey?
//        address workerAddress = getAddress(msg.pubkey());
//        console.log(format("ADDRESS {}", workerAddress));

        address workerAddress = getAddress(_workpubKey, _comp_name);
        require(workerAddress == msg.sender, 1003);


        Worker(msg.sender).receivedSalary(salary);

    }
}
