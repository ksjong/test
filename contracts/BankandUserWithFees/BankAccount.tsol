// SPDX-License-Identifier: UNLICENSED
pragma ever-solidity >= 0.62.0;
import "bank.tsol";
import "locklift/src/console.tsol";

contract BankAccount {
    // user가 소유한 돈 (대출하면 추가)
    uint public money;
    bank public Bank;
    address static bank_address;
    address public user_address;

    uint128 constant MIN_CONTRACT_BALANCE = 10 ever;

    event BorrowedMoney(address user, uint _amount);
    event LoanRepay(address user, uint repayAmount);
    event receivedSuccess( uint _loanNum);
    event repaySuccess(uint _totalRepayAmount);
    event RepayRejected(string message);

    constructor(
        uint128 _initialBalance,
        address _user_address
    ) public {
        tvm.accept();
        user_address = _user_address;
        money = _initialBalance;

        Bank = bank(bank_address);
    }

    function borrowMoney(uint _amount) external {
        tvm.rawReserve(MIN_CONTRACT_BALANCE, 0);

        emit BorrowedMoney(msg.sender, _amount);

        Bank.loan{value:0, flag:128}(
            _amount,
            bank_address
        );

        //todo you need to increase money after receiving callback from Bank, so the chain will be looks like this
        //User.borrowMoney -> Bank.loan -> User.loanReceived

    }

    // function loanReceived(...) // function that can be called only by Bank contract
    // and only after it we need to increase our money, and emit an event
    function loanReceived(
        uint _loanNum
    ) external {
        tvm.rawReserve(MIN_CONTRACT_BALANCE, 0);
        money += _loanNum;
        emit receivedSuccess( _loanNum);

        user_address.transfer({value:0, flag:128});
    }

    function repayLoan(
        uint128 _repayAmount
    ) external {
        tvm.rawReserve(MIN_CONTRACT_BALANCE,0);

        require(money >= _repayAmount, 1005);

        emit LoanRepay(msg.sender, _repayAmount);

        Bank.repaying{value:0, flag:128}(
             _repayAmount,
            bank_address
        );

    }
// User.repayAccepted()/User.repayRejected()
    //    function repayLoan(
    function repayAccepted(
        uint _totalRepayAmount
    ) external {
        tvm.rawReserve(MIN_CONTRACT_BALANCE,0);
        require(_totalRepayAmount <= money, 1008);
        money -= _totalRepayAmount;

        emit repaySuccess(_totalRepayAmount);

        user_address.transfer({value:0, flag:128});
    }

    function repayRejected() external {
        tvm.rawReserve(MIN_CONTRACT_BALANCE, 0);

        emit RepayRejected("Reject!");
        user_address.transfer({value:0, flag:128});

    }
    function getMoney() external view returns (uint _money){
        _money = money;
    }
}
