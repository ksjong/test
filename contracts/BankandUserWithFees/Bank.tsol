// SPDX-License-Identifier: UNLICENSED
import "locklift/src/console.tsol";
pragma ever-solidity >= 0.62.0;

import "BankAccount.tsol";

contract Bank {
    address public owner;
    uint128 constant MIN_CONTRACT_BALANCE = 1 ever;
    TvmCell static userContractCode;


    uint public interestRate;
    uint public bankProfit;
    uint public loanNum;
    bool public isLoanAvailable;
    address public bankAddress;

    event LoanTaken(
        address user,
        uint loanNum
    );

    event RepayfromUserSuccess(
        address user,
        uint TotalRepay
    );
//
    modifier onlyOwner {
        require(msg.sender == owner, 1001);
        _;
    }

    constructor(
        uint _interestRate,
        address _owner
    ) public {
        tvm.accept();
        owner = _owner;
        interestRate = _interestRate;

//        owner = address(this);
        bankAddress = address(this);
        isLoanAvailable = true;
    }

    function configuredInterestRate(uint _interestRate) public onlyOwner {
        tvm.accept();
        interestRate = _interestRate;
    }

    function getAddress() public returns(address) {
        tvm.accept();
        address userAddress = address(tvm.hash(tvm.buildStateInit({
            contr: BankAccount,
            varInit: {
                bankAddress: bankAddress
            },
            pubkey: tvm.pubkey(),
            code: userContractCode
        })));

        return userAddress;
    }

    function loan(uint _loanNum) external {
        tvm.rawReserve(MIN_CONTRACT_BALANCE, 0);
        require(isLoanAvailable, 1002);
        require(msg.sender == getAddress(), 2000);
        loanNum = _loanNum;
        isLoanAvailable = false;
        emit LoanTaken(msg.sender, loanNum);
        BankAccount(msg.sender).loanReceived{value:0, flag:128}(loanNum);
    }

    function calculating() public view returns (uint) {
        uint TotalRepay;
        TotalRepay = loanNum * (100 + interestRate) / 100;
        return TotalRepay;
    }

    function repaying(uint128 _repayAmount) external {
        tvm.rawReserve(MIN_CONTRACT_BALANCE,0);
        require(msg.sender == getAddress(), 1003);

        if(_repayAmount != calculating()){
            BankAccount(msg.sender).repayRejected{value:0, flag:128}();
            return;
        }

        BankAccount(msg.sender).repayAccepted{value:0, flag:128}(_repayAmount);
        bankProfit += (_repayAmount - loanNum);
        loanNum = 0;
        isLoanAvailable = true;
        emit RepayfromUserSuccess(msg.sender, _repayAmount);
    }

    function getInterestRate() external view returns (uint) {
        return interestRate;
    }

    function getProfit() external view returns (uint _profit) {
       _profit = bankProfit;
    }
}
